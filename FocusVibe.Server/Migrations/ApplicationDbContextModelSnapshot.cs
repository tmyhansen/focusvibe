// <auto-generated />
using System;
using FocusVibe.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FocusVibe.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FocusVibe.Server.Models.Distraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Distractions");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.FocusSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreakTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MotivationLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FocusSessions");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.SessionFeedback", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.ToTable("SessionFeedbacks");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.UserPreference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BreakTime")
                        .HasColumnType("int");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<int>("WorkTime")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.Distraction", b =>
                {
                    b.HasOne("FocusVibe.Server.Models.FocusSession", "FocusSession")
                        .WithMany("Distractions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusSession");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.FocusSession", b =>
                {
                    b.HasOne("FocusVibe.Server.Models.User", "User")
                        .WithMany("FocusSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.SessionFeedback", b =>
                {
                    b.HasOne("FocusVibe.Server.Models.FocusSession", "FocusSession")
                        .WithOne("SessionFeedback")
                        .HasForeignKey("FocusVibe.Server.Models.SessionFeedback", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusSession");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.UserPreference", b =>
                {
                    b.HasOne("FocusVibe.Server.Models.User", "User")
                        .WithOne("UserPreference")
                        .HasForeignKey("FocusVibe.Server.Models.UserPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.FocusSession", b =>
                {
                    b.Navigation("Distractions");

                    b.Navigation("SessionFeedback");
                });

            modelBuilder.Entity("FocusVibe.Server.Models.User", b =>
                {
                    b.Navigation("FocusSessions");

                    b.Navigation("UserPreference")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
